// LocationUpdateForm.tsximport * as React from "react";import { useState } from "react";import * as Yup from "yup";// @ts-ignoreimport Cookies from "js-cookie";// @ts-ignoreimport AlertMessage from "./AlertMessage.tsx";interface LocationData {	address: string;	country: string;	city: string;	postalCode: string;	type: string;	capacity: number;	status: string;}const LocationUpdateForm = () => {	const [address, setAddress] = useState("");	const [country, setCountry] = useState("");	const [city, setCity] = useState("");	const [postalCode, setPostalCode] = useState("");	const [locationError, setLocationError] = useState("");	const [locationSuccess, setLocationSuccess] = useState("");		const locationValidationSchema = Yup.object().shape({		address: Yup.string().matches(/^[A-Za-z0-9\s]+$/, "Address cannot contain special characters"),		country: Yup.string(),		city: Yup.string().matches(/^[A-Za-z\s]+$/, "City can only contain letters and spaces"),		postalCode: Yup.string().matches(/^[A-Za-z0-9-]+$/, "Postal code can only contain letters, numbers, and hyphens"),	});		const handleUpdateLocation = async (e: React.FormEvent<HTMLFormElement>) => {		e.preventDefault();		setLocationError("");		setLocationSuccess("");				const userId = Cookies.get("userId");		if (!userId) {			setLocationError("User ID not found in cookies");			return;		}				const updatedLocation: LocationData = {			address,			country,			city,			postalCode,			type: "user-home",			capacity: 999,			status: "unavailable",		};				try {			await locationValidationSchema.validate(updatedLocation, { abortEarly: false });						const response = await fetch(`http://localhost:3000/locations/${userId}`, {				method: "PATCH",				headers: {					"Content-Type": "application/json",				},				body: JSON.stringify(updatedLocation),			});						if (response.ok) {				setLocationSuccess("Location updated successfully");				console.log("Location updated successfully");			} else {				const errorMessage = await response.text();				setLocationError(`Failed to update location: ${errorMessage}`);				console.error("Failed to update location:", errorMessage);			}		} catch (validationErrors: any) {			const errors = validationErrors.inner.map((error: any) => error.message);			setLocationError(errors.join(", "));		}	};		return (		<div className="container my-5">			<h2 className="mb-4">Location</h2>			{locationError && <AlertMessage message={locationError} type="error" />}			{locationSuccess && <AlertMessage message={locationSuccess} type="success" />}			<form onSubmit={handleUpdateLocation}>				<div className="mb-4">					<label htmlFor="address" className="form-label">						Address					</label>					<input						type="text"						id="address"						className="form-control"						value={address}						onChange={(e) => setAddress(e.target.value)}					/>				</div>				<div className="mb-4">					<label htmlFor="country" className="form-label">						Country					</label>					<select						id="country"						className="form-control"						value={country}						onChange={(e) => setCountry(e.target.value)}					>						<option value="">Select a country</option>						<option value="United States">United States</option>						<option value="Canada">Canada</option>						<option value="United Kingdom">United Kingdom</option>						<option value="Australia">Australia</option>						<option value="Germany">Germany</option>						<option value="France">France</option>						<option value="Spain">Spain</option>						<option value="Italy">Italy</option>						<option value="Japan">Japan</option>						<option value="China">China</option>					</select>				</div>				<div className="mb-4">					<label htmlFor="city" className="form-label">						City					</label>					<input						type="text"						id="city"						className="form-control"						value={city}						onChange={(e) => setCity(e.target.value)}					/>				</div>				<div className="mb-4">					<label htmlFor="postalCode" className="form-label">						Postal Code					</label>					<input						type="text"						id="postalCode"						className="form-control"						value={postalCode}						onChange={(e) => setPostalCode(e.target.value)}					/>				</div>				<button type="submit" className="btn btn-dark w-100 mb-3">					Update Location				</button>			</form>		</div>	);};export default LocationUpdateForm;