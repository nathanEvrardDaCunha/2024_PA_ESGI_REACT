import * as React from "react";import { useState, useEffect } from "react";// @ts-ignoreimport Cookies from "js-cookie";const UserDonationContainer = () => {	const [donations, setDonations] = useState([]);	const [filteredDonations, setFilteredDonations] = useState([]);	const [loading, setLoading] = useState(true);	const [error, setError] = useState(null);	const [noData, setNoData] = useState(false);	const [filters, setFilters] = useState({		amountMin: "",		amountMax: "",		startDate: "",		endDate: "",	});		useEffect(() => {		const fetchUserDonations = async () => {			try {				const userId = Cookies.get("userId");				if (!userId) {					throw new Error("User ID not found in cookies");				}								const response = await fetch(`${process.env.REACT_APP_API_BASE_URL}/donations/user/${userId}`);				if (response.status === 404) {					setNoData(true);				} else if (!response.ok) {					throw new Error("Failed to fetch user donations");				} else {					const data = await response.json();					setDonations(data);				}			} catch (error) {				setError(error.message);			} finally {				setLoading(false);			}		};				fetchUserDonations();	}, []);		useEffect(() => {		const applyFilters = () => {			let filtered = donations;						if (filters.amountMin !== "") {				filtered = filtered.filter(					(donation) => donation.amount >= parseFloat(filters.amountMin)				);			}						if (filters.amountMax !== "") {				filtered = filtered.filter(					(donation) => donation.amount <= parseFloat(filters.amountMax)				);			}						if (filters.startDate !== "") {				filtered = filtered.filter(					(donation) =>						new Date(donation.transactionDate) >= new Date(filters.startDate)				);			}						if (filters.endDate !== "") {				filtered = filtered.filter(					(donation) =>						new Date(donation.transactionDate) <= new Date(filters.endDate)				);			}						setFilteredDonations(filtered);		};				applyFilters();	}, [donations, filters]);		const handleFilterChange = (event) => {		const { name, value } = event.target;		setFilters((prevFilters) => ({			...prevFilters,			[name]: value,		}));	};		const handlePrintDonation = async (donationId) => {		try {			const response = await fetch(`${process.env.REACT_APP_API_BASE_URL}/donations/generate-pdf/${donationId}`);						if (!response.ok) {				throw new Error('Failed to generate PDF');			}						const pdfBlob = await response.blob();			const pdfUrl = URL.createObjectURL(pdfBlob);						const tempAnchor = document.createElement('a');			tempAnchor.href = pdfUrl;			tempAnchor.download = 'donation-receipt.pdf';						document.body.appendChild(tempAnchor);			tempAnchor.click();			document.body.removeChild(tempAnchor);						URL.revokeObjectURL(pdfUrl);		} catch (error) {			console.error('Error generating PDF:', error);		}	};		if (loading) {		return <div>Loading...</div>;	}		if (error) {		return <div>Error: {error}</div>;	}		if (noData) {		return (			<div className="container my-5 min-vh-100">				<h2 className="mb-4">Your Donations</h2>				<p>You have not made any donations yet.</p>			</div>		);	}		return (		<div className="container my-5 min-vh-100">			<h2 className="mb-4">Your Donations</h2>			<div className="row mb-4">				<div className="col-md-3">					<input						type="number"						className="form-control"						placeholder="Min Amount"						name="amountMin"						value={filters.amountMin}						onChange={handleFilterChange}					/>				</div>				<div className="col-md-3">					<input						type="number"						className="form-control"						placeholder="Max Amount"						name="amountMax"						value={filters.amountMax}						onChange={handleFilterChange}					/>				</div>				<div className="col-md-3">					<input						type="date"						className="form-control"						placeholder="Start Date"						name="startDate"						value={filters.startDate}						onChange={handleFilterChange}					/>				</div>				<div className="col-md-3">					<input						type="date"						className="form-control"						placeholder="End Date"						name="endDate"						value={filters.endDate}						onChange={handleFilterChange}					/>				</div>			</div>			{filteredDonations.length === 0 ? (				<p>No donations match the selected filters.</p>			) : (				<div className="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">					{filteredDonations.map((donation, index) => (						<div className="col" key={index}>							<div className="card h-100">								<div className="card-body">									<h5 className="card-title">Donation {index + 1}</h5>									<p className="card-text">Amount: ${donation.amount}</p>									<p className="card-text">										Transaction Date:{" "}										{new Date(donation.transactionDate).toLocaleDateString()}									</p>									<p className="card-text">										Payment Method: {donation.paymentMethod}									</p>									<button										className="btn btn-primary"										onClick={() => handlePrintDonation(donation.id)}									>										Print									</button>								</div>							</div>						</div>					))}				</div>			)}		</div>	);};export default UserDonationContainer;