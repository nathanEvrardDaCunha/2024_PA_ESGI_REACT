import * as React from "react";import { useState, useEffect } from "react";// @ts-ignoreimport Cookies from "js-cookie";const UserDonationContainer = () => {	const [donations, setDonations] = useState([]);	const [loading, setLoading] = useState(true);	const [error, setError] = useState(null);	const [noData, setNoData] = useState(false);		useEffect(() => {		const fetchUserDonations = async () => {			try {				const userId = Cookies.get("userId");				if (!userId) {					throw new Error("User ID not found in cookies");				}								const response = await fetch(`http://localhost:3000/donations/user/${userId}`);				if (response.status === 404) {					setNoData(true);				} else if (!response.ok) {					throw new Error("Failed to fetch user donations");				} else {					const data = await response.json();					setDonations(data);				}			} catch (error) {				setError(error.message);			} finally {				setLoading(false);			}		};				fetchUserDonations();	}, []);		const handlePrintDonation = async (donationId) => {		try {			const response = await fetch(`http://localhost:3000/donations/generate-pdf/${donationId}`);						if (!response.ok) {				throw new Error('Failed to generate PDF');			}						const pdfBlob = await response.blob();			const pdfUrl = URL.createObjectURL(pdfBlob);						const tempAnchor = document.createElement('a');			tempAnchor.href = pdfUrl;			tempAnchor.download = 'donation-receipt.pdf';						document.body.appendChild(tempAnchor);			tempAnchor.click();			document.body.removeChild(tempAnchor);						URL.revokeObjectURL(pdfUrl);		} catch (error) {			console.error('Error generating PDF:', error);		}	};		if (loading) {		return <div>Loading...</div>;	}		if (error) {		return <div>Error: {error}</div>;	}		if (noData) {		return <div className="container my-5 min-vh-100">			<h2 className="mb-4">Your Donations</h2>			<p>You have not made any donations yet.</p>		</div>;	}		return (		<div className="container my-5 min-vh-100">			<h2 className="mb-4">Your Donations</h2>			{donations.length === 0 ? (				<p>You have not made any donations yet.</p>			) : (				<div className="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">					{donations.map((donation, index) => (						<div className="col" key={index}>							<div className="card h-100">								<div className="card-body">									<h5 className="card-title">Donation {index + 1}</h5>									<p className="card-text">Amount: ${donation.amount}</p>									<p className="card-text">Transaction Date: {new Date(donation.transactionDate).toLocaleDateString()}</p>									<p className="card-text">Payment Method: {donation.paymentMethod}</p>									<button										className="btn btn-primary"										onClick={() => handlePrintDonation(donation.id)}									>										Print									</button>								</div>							</div>						</div>					))}				</div>			)}		</div>	);};export default UserDonationContainer;