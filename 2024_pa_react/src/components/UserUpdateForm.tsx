// UserUpdateForm.tsximport * as React from "react";import { useState } from "react";import * as Yup from "yup";// @ts-ignoreimport Cookies from "js-cookie";// @ts-ignoreimport AlertMessage from "./AlertMessage.tsx";interface UserData {	email: string;	password: string;	firstName: string;	lastName: string;	birthDate: Date | null;	phoneNumber: string;}const UserUpdateForm = () => {	const [email, setEmail] = useState("");	const [password, setPassword] = useState("");	const [firstName, setFirstName] = useState("");	const [lastName, setLastName] = useState("");	const [birthDate, setBirthDate] = useState<Date>();	const [phoneNumber, setPhoneNumber] = useState("");	const [userError, setUserError] = useState("");	const [userSuccess, setUserSuccess] = useState("");	const [successMessage, setSuccessMessage] = useState("");		const userValidationSchema = Yup.object().shape({		email: Yup.string().email("Invalid email address"),		password: Yup.string().min(6, "Password must be at least 6 characters"),		firstName: Yup.string().matches(/^[A-Za-z]+$/, "First name can only contain letters"),		lastName: Yup.string().matches(/^[A-Za-z]+$/, "Last name can only contain letters"),		birthDate: Yup.date().max(new Date(), "Birth date cannot be in the future"),		phoneNumber: Yup.string().matches(/^[0-9]+$/, "Phone number can only contain numbers").length(10, "Phone number must be exactly 10 digits"),	});		const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {		e.preventDefault();		setUserError("");		setUserSuccess("");		setSuccessMessage("");				const userId = Cookies.get("userId");		if (!userId) {			setUserError("User ID not found in cookies");			return;		}				const updatedFields: Partial<UserData> = {			email: email,			password: password,			firstName: firstName,			lastName: lastName,			birthDate: birthDate,			phoneNumber: phoneNumber,		};				const nonEmptyUpdatedFields = Object.fromEntries(			Object.entries(updatedFields).filter(([_, value]) => value !== "")		);				if (Object.keys(nonEmptyUpdatedFields).length === 0) {			setUserError("No fields were modified");			return;		}				try {			await userValidationSchema.validate(nonEmptyUpdatedFields, { abortEarly: false });						const response = await fetch(`${process.env.REACT_APP_API_BASE_URL}/persons/${userId}`, {				method: "PATCH",				headers: {					"Content-Type": "application/json",				},				body: JSON.stringify(nonEmptyUpdatedFields),			});						if (response.ok) {				setSuccessMessage("User data updated successfully");				console.log("User data updated successfully");			} else {				const errorMessage = await response.text();				setUserError(`Failed to update user data: ${errorMessage}`);				console.error("Failed to update user data:", errorMessage);			}		} catch (validationErrors: any) {			const errors = validationErrors.inner.map((error: any) => error.message);			setUserError(errors.join(", "));		}	};		const handleDeleteUser = async () => {		const userId = Cookies.get("userId");		if (!userId) {			console.error("User ID not found in cookies");			return;		}				try {			const response = await fetch(`${process.env.REACT_APP_API_BASE_URL}/persons/${userId}`, {				method: "DELETE",			});						if (response.ok) {				console.log("User deleted successfully");				Cookies.remove("userId");				Cookies.remove("authToken");				window.location.href = "/";			} else {				const errorMessage = await response.text();				console.error("Failed to delete user:", errorMessage);			}		} catch (error) {			console.error("Error:", error);		}	};		return (		<div className="container my-5">			<h2 className="mb-4">User Information</h2>			{userError && <AlertMessage message={userError} type="error"/>}			{successMessage && <AlertMessage message={successMessage} type="success"/>}			<form onSubmit={handleSubmit}>				<div className="mb-4">					<label htmlFor="email" className="form-label">						Email Address					</label>					<input						type="email"						id="email"						className="form-control"						value={email}						onChange={(e) => setEmail(e.target.value)}					/>				</div>				<div className="mb-4">					<label htmlFor="password" className="form-label">						Password					</label>					<input						type="password"						id="password"						className="form-control"						value={password}						onChange={(e) => setPassword(e.target.value)}					/>				</div>				<div className="mb-4">					<label htmlFor="firstName" className="form-label">						First Name					</label>					<input						type="text"						id="firstName"						className="form-control"						value={firstName}						onChange={(e) => setFirstName(e.target.value)}					/>				</div>				<div className="mb-4">					<label htmlFor="lastName" className="form-label">						Last Name					</label>					<input						type="text"						id="lastName"						className="form-control"						value={lastName}						onChange={(e) => setLastName(e.target.value)}					/>				</div>				<div className="mb-4">					<label htmlFor="birthDate" className="form-label">						Birth Date					</label>					<input						type="date"						id="birthDate"						className="form-control"						value={birthDate ? birthDate.toISOString().split("T")[0] : ""}						onChange={(e) => setBirthDate(new Date(e.target.value))}					/>				</div>				<div className="mb-4">					<label htmlFor="phoneNumber" className="form-label">						Phone Number					</label>					<input						type="tel"						id="phoneNumber"						className="form-control"						value={phoneNumber}						onChange={(e) => setPhoneNumber(e.target.value)}						maxLength={10}					/>				</div>				<button type="submit" className="btn btn-dark w-100 mb-3">					Update Informations				</button>			</form>			<div className="text-center">				<button					type="button"					className="btn btn-danger w-100"					onClick={handleDeleteUser}				>					Delete Account				</button>			</div>		</div>	);};export default UserUpdateForm;