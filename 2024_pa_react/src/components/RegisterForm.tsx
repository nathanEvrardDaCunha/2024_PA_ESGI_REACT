import * as React from "react";import { useState } from "react";import { useNavigate } from "react-router-dom";import * as Yup from "yup";// @ts-ignoreimport AlertMessage from "./AlertMessage.tsx";// @ts-ignoreimport Cookies from "js-cookie";const RegisterForm = () => {	const [email, setEmail] = useState("");	const [password, setPassword] = useState("");	const [firstName, setFirstName] = useState("");	const [lastName, setLastName] = useState("");	const [birthDate, setBirthDate] = useState("");	const [phoneNumber, setPhoneNumber] = useState("");	const [error, setError] = useState("");	const [success, setSuccess] = useState("");	const navigate = useNavigate();		const validationSchema = Yup.object().shape({		email: Yup.string().email("Invalid email address").required("Email is required"),		password: Yup.string().min(6, "Password must be at least 6 characters").required("Password is required"),		firstName: Yup.string().matches(/^[A-Za-z]+$/, "First name can only contain letters").required("First name is required"),		lastName: Yup.string().matches(/^[A-Za-z]+$/, "Last name can only contain letters").required("Last name is required"),		birthDate: Yup.date().max(new Date(), "Birth date cannot be in the future").required("Birth date is required"),		phoneNumber: Yup.string().matches(/^[0-9]+$/, "Phone number can only contain numbers").length(10, "Phone number must be exactly 10 digits").required("Phone number is required"),	});		// @ts-ignore	const handleSubmit = (e) => {		e.preventDefault();		setError("");		setSuccess("");				// @ts-ignore		validationSchema			.validate(				{					email,					password,					firstName,					lastName,					birthDate,					phoneNumber,				},				{ abortEarly: false }			)			.then(() => {				const newPerson = {					email,					password,					firstName,					lastName,					birthDate: new Date(birthDate).toISOString(),					phoneNumber,					role: "user",				};								fetch("${process.env.REACT_APP_API_BASE_URL}/persons/auth/signup", {					method: "POST",					headers: {						"Content-Type": "application/json",					},					body: JSON.stringify(newPerson),				})					.then((response) => {						if (response.ok) {							setSuccess("Person created successfully");							console.log("Person created successfully");							// Store the user's email in a cookie							Cookies.set("userEmail", email);							navigate("/register-location");						} else {							setError("Failed to create person");							console.error("Failed to create person");						}					})					.catch((error) => {						setError("Error during registration");						console.error("Error:", error);					});			})			.catch((validationErrors) => {				// @ts-ignore				const errors = validationErrors.inner.map((error) => error.message);				setError(errors.join(", "));			});	};		return (		<div className="d-flex justify-content-center align-items-center vh-100">			<div className="container">				<div className="row justify-content-center">					<div className="col-md-6">						{error && <AlertMessage message={error} type="error" />}						{success && <AlertMessage message={success} type="success" />}						<form onSubmit={handleSubmit} className="p-1 p-md-5 bg-light rounded">							<div className="mb-4">								<label htmlFor="email" className="form-label">									Email Address*								</label>								<input									type="email"									id="email"									className="form-control"									value={email}									onChange={(e) => setEmail(e.target.value)}									required								/>							</div>							<div className="mb-4">								<label htmlFor="password" className="form-label">									Password*								</label>								<input									type="password"									id="password"									className="form-control"									value={password}									onChange={(e) => setPassword(e.target.value)}									required								/>							</div>							<div className="mb-4">								<label htmlFor="firstName" className="form-label">									First Name*								</label>								<input									type="text"									id="firstName"									className="form-control"									value={firstName}									onChange={(e) => setFirstName(e.target.value)}									required								/>							</div>							<div className="mb-4">								<label htmlFor="lastName" className="form-label">									Last Name*								</label>								<input									type="text"									id="lastName"									className="form-control"									value={lastName}									onChange={(e) => setLastName(e.target.value)}									required								/>							</div>							<div className="mb-4">								<label htmlFor="birthDate" className="form-label">									Birth Date*								</label>								<input									type="date"									id="birthDate"									className="form-control"									value={birthDate}									onChange={(e) => setBirthDate(e.target.value)}									required								/>							</div>							<div className="mb-4">								<label htmlFor="phoneNumber" className="form-label">									Phone Number*								</label>								<input									type="tel"									id="phoneNumber"									className="form-control"									value={phoneNumber}									onChange={(e) => setPhoneNumber(e.target.value)}									maxLength={10}									required								/>							</div>							<button type="submit" className="btn btn-dark w-100">								Register							</button>						</form>					</div>				</div>			</div>		</div>	);};export default RegisterForm;