import * as React from 'react';import { Calendar, momentLocalizer } from 'react-big-calendar';// @ts-ignoreimport moment from 'moment';import 'react-big-calendar/lib/css/react-big-calendar.css';import { useEffect, useState } from "react";import { Badge, Modal, Button } from 'react-bootstrap';// @ts-ignoreimport Navbar from "../components/NavBar.tsx";// @ts-ignoreimport Footer from "../components/Footer.tsx";// @ts-ignoreimport ComposedBackground from "../components/ComposedBackground.tsx";// @ts-ignoreimport SideBar from "../components/SideBar.tsx";// @ts-ignoreimport Cookies from "js-cookie";const localizer = momentLocalizer(moment);const ToggleSidebarButton = ({ onClick, isOpen }) => (	<button		className={`bg-dark d-flex align-items-center ${isOpen ? 'active' : ''}`}		onClick={onClick}	>		<i className={`bi bi-list${isOpen ? 'bi-x' : ''}`}></i>		<span className={'text-light'}>X</span>	</button>);const ActivityPage = () => {	const [activities, setActivities] = useState([]);	const [selectedEvent, setSelectedEvent] = useState(null);	const [showModal, setShowModal] = useState(false);		useEffect(() => {		const fetchActivities = async () => {			try {				const userId = Cookies.get("userId"); // Get the user ID from the cookie				if (!userId) {					console.error("User ID not found in cookies");					return;				}								const response = await fetch(`${process.env.REACT_APP_API_BASE_URL}/activities/person/${userId}`);				const data = await response.json();								if (response.ok) {					setActivities(data);					console.log("Fetch activities for user completed successfully");				} else {					console.error("Error fetching activities for user:", data.error);				}			} catch (error) {				console.error("Error fetching activities for user:", error);			}		};				fetchActivities();	}, []);		const events = activities.map((activity) => ({		title: activity.title,		start: new Date(activity.startDate),		end: new Date(activity.endDate),		description: activity.description,		type: activity.type,		status: activity.status,	}));		const eventComponent = ({ event }) => {		return (			<div className="d-flex justify-content-between align-items-center">				<span>{event.title}</span>			</div>		);	};		const handleSelectEvent = (event) => {		setSelectedEvent(event);		setShowModal(true);	};		const handleCloseModal = () => {		setSelectedEvent(null);		setShowModal(false);	};		const [isSidebarOpen, setIsSidebarOpen] = useState(false);		const toggleSidebar = () => {		setIsSidebarOpen(!isSidebarOpen);	};		const closeSidebar = () => {		setIsSidebarOpen(false);	};		return (		<ComposedBackground>			<Navbar/>			<div className="d-flex">				{isSidebarOpen && <SideBar onClose={closeSidebar}/>}				<div className={`flex-grow-1 ${isSidebarOpen ? "mx-0" : ""}`}>					<ToggleSidebarButton onClick={toggleSidebar} isOpen={isSidebarOpen}/>					<Calendar className={'m-5 min-vh-100'}					          localizer={localizer}					          events={events}					          startAccessor="start"					          endAccessor="end"					          style={{height: 500}}					          components={{						          event: eventComponent,					          }}					          onSelectEvent={handleSelectEvent}					/>					<Modal show={showModal} onHide={handleCloseModal}>						<Modal.Header closeButton>							<Modal.Title>{selectedEvent?.title}</Modal.Title>						</Modal.Header>						<Modal.Body>							<p>Start Date: {selectedEvent?.start.toLocaleString()}</p>							<p>End Date: {selectedEvent?.end.toLocaleString()}</p>							<p>Description: {selectedEvent?.description}</p>							<p>Type: {selectedEvent?.type}</p>							<p>Status: {selectedEvent?.status}</p>						</Modal.Body>						<Modal.Footer>							<Button variant="secondary" onClick={handleCloseModal}>								Close							</Button>						</Modal.Footer>					</Modal>				</div>			</div>			<Footer/>		</ComposedBackground>	);};export default ActivityPage;