import * as React from 'react';import { Calendar, momentLocalizer } from 'react-big-calendar';// @ts-ignoreimport moment from 'moment';import 'react-big-calendar/lib/css/react-big-calendar.css';import { useEffect, useState } from "react";import { Badge, Modal, Button } from 'react-bootstrap';const localizer = momentLocalizer(moment);const TaskPage = () => {	const [tasks, setTasks] = useState([]);	const [selectedEvent, setSelectedEvent] = useState(null);	const [showModal, setShowModal] = useState(false);		useEffect(() => {		const fetchTasks = async () => {			try {				const response = await fetch('http://localhost:3000/tasks');				const data = await response.json();				setTasks(data);				console.log("fetch task completed successfully");			} catch (error) {				console.error('Error fetching tasks:', error);			}		};				fetchTasks();	}, []);		const events = tasks.map((task) => ({		title: task.title,		start: new Date(task.startDate),		end: new Date(task.endDate),		priority: task.priority,		status: task.status,		description: task.description,		type: task.type,	}));		const eventComponent = ({ event }) => {		let priorityBadge;				if (event.priority === 'High') {			priorityBadge = <Badge bg="danger">High</Badge>;		} else if (event.priority === 'Medium') {			priorityBadge = <Badge bg="warning" text="dark">Medium</Badge>;		} else {			priorityBadge = <Badge bg="info">Low</Badge>;		}				return (			<div className="d-flex justify-content-between align-items-center">				<span>{event.title}</span>				{priorityBadge}			</div>		);	};		const handleSelectEvent = (event) => {		setSelectedEvent(event);		setShowModal(true);	};		const handleCloseModal = () => {		setSelectedEvent(null);		setShowModal(false);	};		return (		<div>			<Calendar				localizer={localizer}				events={events}				startAccessor="start"				endAccessor="end"				style={{ height: 500 }}				components={{					event: eventComponent,				}}				onSelectEvent={handleSelectEvent}			/>						<Modal show={showModal} onHide={handleCloseModal}>				<Modal.Header closeButton>					<Modal.Title>{selectedEvent?.title}</Modal.Title>				</Modal.Header>				<Modal.Body>					<p>Start Date: {selectedEvent?.start.toLocaleString()}</p>					<p>End Date: {selectedEvent?.end.toLocaleString()}</p>					<p>Priority: {selectedEvent?.priority}</p>					<p>Status: {selectedEvent?.status}</p>					<p>Description: {selectedEvent?.description}</p>					<p>Type: {selectedEvent?.type}</p>				</Modal.Body>				<Modal.Footer>					<Button variant="secondary" onClick={handleCloseModal}>						Close					</Button>				</Modal.Footer>			</Modal>		</div>	);};export default TaskPage;