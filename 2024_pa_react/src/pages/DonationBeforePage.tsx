import * as React from 'react';import { loadStripe } from '@stripe/stripe-js';// @ts-ignoreimport Cookies from 'js-cookie';import { useNavigate } from 'react-router-dom';// @ts-ignoreimport Navbar from "../components/NavBar.tsx";// @ts-ignoreimport Footer from "../components/Footer.tsx";// @ts-ignoreimport ComposedBackground from "../components/ComposedBackground.tsx";// @ts-ignoreimport AlertMessage from "../components/AlertMessage.tsx";const stripePromise = loadStripe('pk_test_51PAYakGNSIKaQBU9d6qGi3iQZzHaQWoRZ5V1RJWQkTplLuMRPEOBgjVuooqWsxZQ73SankPXEhgwQwsos4arhe6u00inH6IXaS');const DonationBeforePage: React.FC = () => {	const navigate = useNavigate();		const [message, setMessage] = React.useState('');	const [amount, setAmount] = React.useState(0);	const [showError, setShowError] = React.useState(false);		const handleSubmit = async (e: React.FormEvent) => {		e.preventDefault();				if (amount < 1) {			setShowError(true);			return;		}				try {			const userId = Cookies.get('userId');						if (!userId) {				// Handle user not logged in				return;			}						const response = await fetch('http://localhost:3000/donations/create-checkout-session', {				method: 'POST',				headers: {					'Content-Type': 'application/json',				},				body: JSON.stringify({					amount: amount * 100, // Convert amount to cents					userId,					type: "donation",					paymentMethod: 'card',					message,				}),			});						if (!response.ok) {				throw new Error('An error occurred while creating the checkout session');			}						const session = await response.json();			const stripe = await stripePromise;			const result = await stripe.redirectToCheckout({				sessionId: session.id,			});						if (result.error) {				console.log(result.error.message);			}		} catch (error) {			console.error('Error:', error);		}	};		return (		<ComposedBackground>			<Navbar />			<div className="d-flex justify-content-center align-items-center min-vh-100">				<div className="container">					<div className="row justify-content-center">						<div className="col-md-6">							{showError && <AlertMessage message="The minimum donation amount is 1." type="error" />}							<form onSubmit={handleSubmit} className="p-4 bg-light rounded">								<h2 className="mb-4 text-center">Donation Form</h2>								<div className="mb-3">									<label htmlFor="message" className="form-label">										Message:									</label>									<textarea										id="message"										className="form-control"										value={message}										onChange={(e) => setMessage(e.target.value)}										rows={3}									/>								</div>								<div className="mb-4">									<label htmlFor="amount" className="form-label">										Amount:									</label>									<input										type="number"										id="amount"										className="form-control"										value={amount}										onChange={(e) => setAmount(parseFloat(e.target.value))}										required									/>								</div>								<button type="submit" className="btn btn-dark w-100">									Donate								</button>							</form>						</div>					</div>				</div>			</div>			<Footer/>		</ComposedBackground>	);};export default DonationBeforePage;